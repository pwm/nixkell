name: replaceme
version: 0.1.0.0

dependencies:
  - base >= 4.7 && < 5

library:
  source-dirs: src

executables:
  replaceme:
    main: Main.hs
    source-dirs: bin
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - replaceme

tests:
  spec:
    main: Spec.hs
    source-dirs: test
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - hspec
      - replaceme
    verbatim:
      build-tool-depends: hspec-discover:hspec-discover == 2.*

default-extensions:
  - BangPatterns
  - BinaryLiterals
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - DuplicateRecordFields
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NumericUnderscores
  - LambdaCase
  - OverloadedStrings
  - ScopedTypeVariables
  - StandaloneDeriving
  - TupleSections
  - TypeApplications

ghc-options:
  - -Weverything
  - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures.
  - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
  - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function.
  - -Wno-all-missed-specialisations # See missed-specialisations
  - -Wno-unsafe # Don’t use Safe Haskell warnings
  - -Wno-safe # Don’t use Safe Haskell warnings
  - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
  - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
  - -Wno-missing-export-lists # Don't warn if export list is missing
  - -Wno-missing-home-modules # Don't warn in GHCi when loading modules (this is a bogus warning)
  - -Wno-missing-safe-haskell-mode
  - -Wno-prepositive-qualified-module
  - -Wno-unused-packages
  - -Wno-implicit-prelude
